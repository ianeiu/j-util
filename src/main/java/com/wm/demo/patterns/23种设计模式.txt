Java中的23种设计模式：
Factory（工厂模式）， Builder（建造模式）， Factory Method（工厂方法模式），
Prototype（原始模型模式），Singleton（单例模式）， Facade（门面模式），
Adapter（适配器模式）， Bridge（桥梁模式）， Composite（合成模式），
Decorator（装饰模式）， Flyweight（享元模式）， Proxy（代理模式），
Command（命令模式）， Interpreter（解释器模式）， Visitor（访问者模式），
Iterator（迭代子模式）， Mediator（调停者模式）， Memento（备忘录模式），
Observer（观察者模式）， State（状态模式）， Strategy（策略模式），
Template Method（模板方法模式）， Chain Of Responsibleity（责任链模式）

创建型模式：简单工厂模式√（抽象工厂模式），工厂方法模式√，建造者模式，原型模式，单例模式√。(5个)
结构型模式：外观模式√、适配器模式√、代理模式√、装饰模式√、桥接模式、组合模式、享元模式。(7个)
行为型模式：模版方法模式√、观察者模式、状态模式、职责链模式、命令模式、访问者模式、策略模式、备忘录模式、迭代器模式、解释器模式、 中介者模式。(11个)

1. 单一职责原则 SRP
一个类应该仅有一个引起它变化的原因。
2. 开放关闭原则 OCP
一个类应该对外扩展开放，对修改关闭。
3. 里氏替换原则 LSP
子类型能够替换掉它们的父类型。
4. 依赖倒置原则 DIP
要依赖于抽象，不要依赖于具体类，要做到依赖倒置，应该做到：
	* 高层模块不应该依赖底层模块，二者都应该依赖于抽象。
	* 抽象不应该依赖于具体实现，具体实现应该依赖于抽象。
5. 接口隔离原则 ISP
不应该强迫客户依赖于他们不用的方法。
6. 最少知识原则 LKP
只和你的朋友谈话。
7. 其他原则
	* 面向接口编程
	* 优先使用组合，而非继承
	* 一个类需要的数据应该隐藏在类的内部
	* 类之间应该零耦合，或者只有传导耦合，换句话说，类之间要么没关系，要么只使用另一个类的接口提供的操作
	* 在水平方向上尽可能统一地分布系统功能