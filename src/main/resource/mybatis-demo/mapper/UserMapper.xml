<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wm.demo.mybatis.mapper.UserMapper">
<!-- 
namespace:名称空间;指定为接口的全类名
id：唯一标识
resultType：返回值类型
#{id}：从传递过来的参数中取出id值
 -->
	<select id="getUserById" resultType="com.wm.demo.mybatis.model.TbSysUser">
		select * from tb_sys_user where user_id = #{id}
	</select>
	
	
	<!-- public void addEmp(Employee employee); -->
	<!-- parameterType：参数类型，可以省略， 
	获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
	<insert id="addUser" parameterType="com.wm.demo.mybatis.model.TbSysUser"
		useGeneratedKeys="true" keyProperty="user_id" 
	databaseId="mysql">
		insert into tb_sys_user(user_id,user_name,passwork,user_sex,create_time,status) 
		values(#{userId},#{userName},#{passwork},#{userSex},#{createTime},#{status})
	</insert>
	
	<!-- 
	获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
	<insert id="addUser" databaseId="oracle">
		<!-- 
		keyProperty:查出的主键值封装给javaBean的哪个属性
		order="BEFORE":当前sql在插入sql之前运行
			   AFTER：当前sql在插入sql之后运行
		resultType:查出的数据的返回值类型
		
		BEFORE运行顺序：
			先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
			在运行插入的sql；就可以取出id属性对应的值
		AFTER运行顺序：
			先运行插入的sql（从序列中取出新值作为id）；
			再运行selectKey查询id的sql；
		 -->
		<selectKey keyProperty="user_id" order="BEFORE" resultType="Integer">
			<!-- 编写查询主键的sql语句 -->
			<!-- BEFORE-->
			select SYSUSER_SEQ.nextval from dual 
			<!-- AFTER：
			 select SYSUSER_SEQ_SEQ.currval from dual -->
		</selectKey>
		
		<!-- 插入时的主键是从序列中拿到的 -->
		<!-- BEFORE:-->
		insert into tb_sys_user(user_id,user_name,passwork,user_sex,create_time,status) 
		values(#{userId},#{userName},#{passwork},#{userSex},#{createTime,jdbcType=NULL},#{status})
		<!-- AFTER：
		insert into tb_sys_user(user_id,user_name,passwork,user_sex,create_time,status) 
		values(SYSUSER_SEQ.nextval,,#{userName},#{passwork},#{userSex},#{createTime,jdbcType=NULL},#{status}
		 -->
	</insert>
	
	<update id="updateUser">
		update tb_sys_user 
		set passwork=#{passwork},status=#{status}
		where user_id=#{userId}
	</update>
	
	<delete id="deleteUserById">
		delete from tb_sys_user where user_id=#{id}
	</delete>
</mapper>