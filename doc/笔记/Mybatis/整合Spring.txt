https://www.cnblogs.com/ClassNotFoundException/p/6425558.html

 要利用Mybatis首先是需要导入mybatis-x.x.x.jar，其次，要整合Spring和Mybatis需要导入mybatis-spring-x.x.x.jar。
 
		<dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.2.6</version>
        </dependency>
        
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.2</version>
        </dependency>
        
常用配置：
	resource/spring/spring-dao.xml
	resource/mybatis-config.xml
	
Spring和Mybatis整合的三种方式
1、
SqlSessionFactoryBean来替代SqlSessionFactoryBuilder来创建SqlSession,利用mybatis映射文件**.xml来配置(可参考ssm模块)
SqlSessionFactoryBean有一个必须属性dataSource，另外其还有一个通用属性configLocation（用来指定mybatis的xml配置文件路径）。
	spring-dao.xml：
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="configLocation" value="classpath:mybatis-config.xml" />
			<property name="mapperLocations" value="classpath:com/wm/ssm/**/**/dao/*.xml" />
		</bean>
	mybatis-config.xml:
	  	<typeAliases>
			 <typeAlias type="com.wm.ssm.sys.user.model.TbSysUser" alias="TbSysUser" />
			<package name="com.wm.ssm.sys.user" />
		</typeAliases>

2、
SqlSessionFactoryBean来替代SqlSessionFactoryBuilder来创建SqlSession
采用数据映射器（MapperFactoryBean）的方式
不用写mybatis映射文件
采用注解方式提供相应的sql语句和输入参数。
	spring-dao.xml：
		  <!-- 创建SqlSessionFactory，同时指定数据源-->
	      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	          <property name="dataSource" ref="dataSource" /> 
	      </bean>
	      <!--创建数据映射器，数据映射器必须为接口-->
	      <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
	          <property name="mapperInterface" value="com.wm.ssm.sys.user.dao.UserDaoImpl" />
	          <property name="sqlSessionFactory" ref="sqlSessionFactory" /> 
	      </bean>
	      <bean id="userDaoImpl" class="com.xxt.ibatis.dbcp.dao.impl.UserDaoImpl">
	          <property name="userMapper" ref="userMapper"/>
	      </bean>
	 数据映射器UserMapper.java：
			public interface UserMapper {
		        @Select("SELECT * FROM user WHERE id = #{userId}") 
		        User getUser(@Param("userId") long id); 
			}   
	DAO接口类UserDao.java：
			public interface UserDao {
		       public User getUserById(User user);
			}
	DAO接口实现类UserDaoImpl.java：
			public class UserDaoImpl implements UserDao {
		       private UserMapper userMapper;
		       public void setUserMapper(UserMapper userMapper) { 
		           this.userMapper = userMapper; 
		       } 
		       public User getUserById(User user) {
		          return userMapper.getUser(user.getId()); 
		       }
			}
			
3、
SqlSessionFactoryBean来替代SqlSessionFactoryBuilder创建SqlSession
不采用采用数据映射器（MapperFactoryBean）的方式，改为MapperScannerConfigurer 进行扫描
不用写mybatis映射文件
采用注解方式提供相应的sql语句和输入参数。
采用注解方式省去定义mapper的Bean

MapperFactoryBean 创建的代理类实现了 UserMapper 接口,并且注入到应用程序中。
 因为代理创建在运行时环境中(Runtime,译者注) ,那么指定的映射器必须是一个接口,而 不是一个具体的实现类。
 上面的MapperFactoryBean配置有一个很大的缺点，就是系统有很多的配置文件时 全部需要手动编写，所以上述的方式已经不用了。
没有必要在 Spring 的 XML 配置文件中注册所有的映射器。
相反,你可以使用一个 MapperScannerConfigurer , 它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。
	
	spring-dao.xml：
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!--注入sqlSessionFactory-->
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
			<!--给出需要扫描Dao接口包-->
			<property name="basePackage" value="com.wm.ssm.sys.user.dao" />
		</bean> 
    basePackage 属性是让你为映射器接口文件设置基本的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。

注 意 , 没有必要去指定SqlSessionFactory 或 SqlSessionTemplate , 
因为 MapperScannerConfigurer 将会创建MapperFactoryBean，之后自动装配。
但是,如果你使 用了一个 以上的 DataSource，那 么自动装配可能会失效 。
这种情况下 ，你可以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 
属性来设置正确的 bean 名称来使用。
