项目改造为springboot所见问题
1----------------------------------------------------------------------------------------------------
现象：引入layer.js出现undefinedcss目录.txt
原因：layer.js与layui.js冲突
解决：将layui.js 第二个.link 中的n.dir改为(n.dir?n.dir:r)
2----------------------------------------------------------------------------------------------------
现象：配置CommonsMultipartResolver，上传文件返回异常HttpMediaTypeNotSupportedException
原因：同下
解决：FUN1、不配置CommonsMultipartResolver
	FUN2、启动类@EnableAutoConfiguration(exclude = {MultipartAutoConfiguration.class}) （不建议）
3----------------------------------------------------------------------------------------------------
现象：上传文件返回异常java.lang.ClassCastException: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile cannot be cast to org.springframework.web.multipart.commons.CommonsMultipartFile
原因：FileUtil中multipartToFile的代码片段  CommonsMultipartFile cf = (CommonsMultipartFile)multfile
	与springboot自带的org.springframework.web.multipart.MultipartFile冲突
	import org.springframework.web.multipart.commons.CommonsMultipartResolver;//这是旧项目引入的
	import org.springframework.web.multipart.MultipartFile;//这是springboot整合的
解决：采用输入流方式获取File对象，具体代码自行百度
4----------------------------------------------------------------------------------------------------
现象：Shiro 自定义 filter 匹配异常，无限拦截重定向
参考：http://www.hillfly.com/2017/179.html
原因：自定义Filter注册为了 Bean交给 Spring托管,它会被自动注册到 FilterChain中。请求先经过自定义Filter，导致请求被其先消费掉了，而ShiroFilter成了摆设。
解决：FUN1、利用 FilterRegistrationBean 注册自定义 Filter （建议使用）
		ex：
			@Bean
			public CasFilter casFilter(){
				CasFilter cf = new CasFilter();
				cf.setSuccessUrl(successUrl);
				cf.setFailureUrl(failureUrl);
				return cf;
			}
			
			/**
			 * 注册casFilter
			 * @param casFilter
			 * @return
			 */
			@Bean
			public FilterRegistrationBean registCasFilter(CasFilter casFilter) {
				FilterRegistrationBean cas = new FilterRegistrationBean();
				cas.setFilter(casFilter);
				cas.setEnabled(false);	//该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理  x
				return cas;
			}
			
			/**
			 * 注册shiroFilter
			 * @param securityManager
			 * @param casFilter
			 * @param logoutFilter
			 * @return
			 */
			@Bean
			public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager,
					CasFilter casFilter,LogoutFilter logoutFilter) {
				ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
				...
				Map<String,Filter> filters = new HashMap<>();
				filters.put("casFilter",casFilter);
				filters.put("logoutFilter", logoutFilter);
				shiroFilterFactoryBean.setFilters(filters);		//添加casFilter到shiroFilter
				...
			}
	FUN2、将 CasFilter注册为了 Bean交给 Spring托管,它会被自动注册到 FilterChain中，那我们如果不把它注册为 Bean就可以避免这个问题了。
		ex:
			/**
			 * 注册shiroFilter
			 * @param securityManager
			 * @return
			 */
			@Bean
			public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager) {
				ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
				...
				Map<String,Filter> filters = new HashMap<>();
				filters.put("casFilter",new CasFilter());
				filters.put("logoutFilter", new LogoutFilter());
				shiroFilterFactoryBean.setFilters(filters);		//添加casFilter到shiroFilter
				...
			}
5----------------------------------------------------------------------------------------------------
现象：启动报错Caused by: java.lang.NoClassDefFoundError: ch/qos/logback/classic/turbo/TurboFilter
原因:springboot1.3.x和1.3.x以下版本才支持log4j的日志配置，1.3.x以上版本只支持log4j2和logback的日志配置
解决：使用log4j2或logback
6----------------------------------------------------------------------------------------------------
现象：项目mvn install后jar包，启动报错，为获取到某个包下的class对象集合
原因：springboot项目打包后获取包资源所在路径与启动main不一样
	ex：//jarPaht:file:/E:/IDEABuilder/fs/tyrz-springboot/tyrz-front/target/fsrzfw.jar!/BOOT-INF/classes!/cn/com/do1/component/identitySource/service/impl
解决：逐一分割路径获取类对象
	/**
	 * 获得包下面的所有的class
	 * @author FengHuayuan
	 * @date 2018年4月21日 下午12:25:20.
	 * @param pack
	 * @return
	 */
	public static List<Class<?>> getClassesFromPackage(String pack) {
		List<Class<?>> clazzs = new ArrayList<Class<?>>();
		// 是否循环搜索子包
		boolean recursive = true;
		// 包名字
		String packageName = pack;
		// 包名对应的路径名称
		String packageDirName = packageName.replace('.', '/');
		Enumeration<URL> dirs;
		try {
			dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
			while (dirs.hasMoreElements()) {
				URL url = dirs.nextElement();
				String protocol = url.getProtocol();
				if ("file".equals(protocol)) {
					log.debug("*****【File类型】的扫描！");
					String filePath = URLDecoder.decode(url.getFile(), "UTF-8");
					findClassInPackageByFile(packageName, filePath, recursive, clazzs);
				} else if ("jar".equals(protocol)) {
					log.debug("*****【Jar类型】的扫描！");
					String filePath = URLDecoder.decode(url.getFile(), "UTF-8");
					getClasssFromJarFile(filePath, clazzs);//wm add
				}
			}

		} catch (Exception e) {
			log.error(e.getMessage(),e);
		}
		return clazzs;
	}
	
	/** 
	 * 从jar文件中读取指定目录下面的所有的class文件 
	 * springboot打jar包专用
	 * @author wm
	 * @param jarPaht   jar文件存放的位置 
	 * @param filePaht    指定的文件目录 
	 * @param clazzs 所有的的class的对象 
	 */  
	public static void getClasssFromJarFile(String jarPath,List<Class<?>> clazzs) {  

		log.info("getClasssFromJarFile - jarPath:"+jarPath);//wm
		//jarPaht:file:/E:/IDEABuilder/fs/tyrz-springboot/tyrz-front/target/fsrzfw.jar!/BOOT-INF/classes!/cn/com/do1/component/identitySource/service/impl
		String[] jarPaths = jarPath.split("!");
		String jarPaht=jarPaths[0].substring(6);//去掉file:/
		String startDir = (jarPaths[1]+jarPaths[2]).substring(1);//去掉/
		
	    JarFile jarFile = null;  
	    try {  
	        jarFile = new JarFile(jarPaht);  
	    } catch (IOException e1) {  
	        e1.printStackTrace();  
	    }  
	  
	    List<JarEntry> jarEntryList = new ArrayList<JarEntry>();  
	  
	    Enumeration<JarEntry> ee = jarFile.entries();  
	    while (ee.hasMoreElements()) {  
	        JarEntry entry = (JarEntry) ee.nextElement();  
	        if (entry.getName().startsWith(startDir) && entry.getName().endsWith(".class")) {  
		        log.info("getClasssFromJarFile - entry:"+entry.getName());//wm
	            jarEntryList.add(entry);  
	        }  
	    }  
	    for (JarEntry entry : jarEntryList) {  
	        String className = entry.getName().replace('/', '.');  
			//   BOOT-INF/classes/cn/com/do1/component/identitySource/service/impl/XXX.class
	        className = className.substring(17, className.length() - 6);//去掉  BOOT-INF/classes/     .class
	        try {  
	            clazzs.add(Thread.currentThread().getContextClassLoader().loadClass(className));  
	        } catch (ClassNotFoundException e) {  
	            e.printStackTrace();  
	        }  
	    }  
	  
	}

7----------------------------------------------------------------------------------------------------
		
		