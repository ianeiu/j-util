pom新增：
	<dependencies>
		...
		<!--jsp支持 -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- 配置jsp-jstl的支持 -->
		<dependency>
	        <groupId>javax.servlet.jsp.jstl</groupId>
	        <artifactId>jstl-api</artifactId>
	        <version>1.2</version>
	    </dependency>
    	...
	</dependencies>
   
  	<build> 
  	 	...
    	<resources>
    		<resource>
                <directory>src/main/webapp</directory>
                <!-- 处理jar包启动无法访问jsp的问题 -->
                <targetPath>META-INF/resources</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>**/**</include>
                </includes>
            </resource> 
		</resources>
	</build>
	
新增配置类（处理jar包启动无法访问jsp的问题）：
	
	import java.io.File;
	import java.net.MalformedURLException;
	import java.net.URL;
	
	import org.apache.catalina.Context;
	import org.apache.catalina.Lifecycle;
	import org.apache.catalina.LifecycleEvent;
	import org.apache.catalina.LifecycleListener;
	import org.apache.catalina.WebResourceRoot.ResourceSetType;
	import org.springframework.util.ResourceUtils;
	
	/**
	 * Add main class fat jar/exploded directory into tomcat ResourceSet.
	 *
	 * @author hengyunabc 2017-07-29
	 *
	 */
	public class StaticResourceConfigurer implements LifecycleListener {
	
		private final Context context;
	
		public StaticResourceConfigurer(Context context) {
			this.context = context;
		}
	
		@Override
		public void lifecycleEvent(LifecycleEvent event) {
			if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
				URL location = this.getClass().getProtectionDomain().getCodeSource().getLocation();
	
				if (ResourceUtils.isFileURL(location)) {
					// when run as exploded directory
					String rootFile = location.getFile();
					if (rootFile.endsWith("/BOOT-INF/classes/")) {
						rootFile = rootFile.substring(0, rootFile.length() - "/BOOT-INF/classes/".length() + 1);
					}
					if (!new File(rootFile, "META-INF" + File.separator + "resources").isDirectory()) {
						return;
					}
	
					try {
						location = new File(rootFile).toURI().toURL();
					} catch (MalformedURLException e) {
						throw new IllegalStateException("Can not add tomcat resources", e);
					}
				}
	
				String locationStr = location.toString();
				if (locationStr.endsWith("/BOOT-INF/classes!/")) {
					// when run as fat jar
					locationStr = locationStr.substring(0, locationStr.length() - "/BOOT-INF/classes!/".length() + 1);
					try {
						location = new URL(locationStr);
					} catch (MalformedURLException e) {
						throw new IllegalStateException("Can not add tomcat resources", e);
					}
				}
				this.context.getResources().createWebResourceSet(ResourceSetType.RESOURCE_JAR, "/", location,
						"/META-INF/resources");
	
			}
		}
	}
	
	import org.apache.catalina.Context;
	import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
	import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
	import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
	import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;
	import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;
	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	
	import cn.com.do1.component.config.assembly.StaticResourceConfigurer;
	
	/**
	 * 处理jar包启动无法访问jsp的问题
	 * <p>Title: TomcatConfig</p>  
	 * <p>Description: </p>  
	 * @author wm  
	 * @date 2018年7月24日
	 */
	@Configuration
	@ConditionalOnProperty(name = "tomcat.staticResourceCustomizer.enabled", matchIfMissing = true)
	public class TomcatConfig {
		@Bean
		public EmbeddedServletContainerCustomizer staticResourceCustomizer() {
			return new EmbeddedServletContainerCustomizer() {
				@Override
				public void customize(ConfigurableEmbeddedServletContainer container) {
					if (container instanceof TomcatEmbeddedServletContainerFactory) {
						((TomcatEmbeddedServletContainerFactory) container)
								.addContextCustomizers(new TomcatContextCustomizer() {
									@Override
									public void customize(Context context) {
										context.addLifecycleListener(new StaticResourceConfigurer(context));
									}
								});
					}
				}
	
			};
		}
	}
		
		